# Вычислить число Пи c заданной точностью d

# Пример:

# - при $d = 0.001, π = 3.141.$    $10^{-1} ≤ d ≤10^{-10}$
# «Кто и шутя и скоро пожелаетъ пи узнать число, ужъ знаетъ».

d = int(input("До какого знака считать число Пи? "))


#Формула Валлиса. 
# num = 100
# from math import sqrt as V
# Pi = 3 * V(3)/2
# for k in range(1,num+1+10**d):
#     Pi *= k**2/(k**2-(1/3)**2)
# print(f'{Pi:.{d}f}')
# Вычисление становится слишком долгим после 6-го знака. Если брать точность не по степени 10^d, 
#то вычисления 5-го знака будут неточными.


# #Более просто через тригонометрические функции 
# import numpy

# print(f"Через аркосинус(-1): {numpy.arccos(-1):.{d}f}")
# print(f"Через встроенное pi : {numpy.pi:.{d}f}")


#Bailey–Borwein–Plouffe .Более быстрая формула, которая считает сразу дробную часть до указанного знака, вместо последовательных вычислений ряда.
#https://en.wikipedia.org/wiki/Bailey–Borwein–Plouffe_formula 
Pi_bbp = sum(1/(16)**k * 
        ((4)/(8*k+1) - 
         (2)/(8*k+4) - 
         (1)/(8*k+5) -
         (1)/(8*k+6)) for k in range (d))

print(f'c округлением на последней цифре: {Pi_bbp:.{d}f}"')