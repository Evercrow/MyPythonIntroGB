#!/usr/bin/env python
# coding: utf-8

# –§—É–Ω–∫—Ü–∏—è  y = 5 * sin(x) - x
# 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–Ω–∏
# 2. –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–≤–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç
# 3. –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–≤–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è —É–±—ã–≤–∞–µ—Ç
# 4. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
# 5. –í—ã—á–∏—Å–ª–∏—Ç—å –≤–µ—Ä—à–∏–Ω—É
# 6. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º f > 0
# 7. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º f < 0

# In[1]:



from sympy import *
x = Symbol('x',real=True)
y = 5*sin(x) - x
y


# In[2]:


#–°—Ä–∞–∑—É –ø–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –±—ã–ª–∞ –ø–æ–Ω—è—Ç–Ω–µ–π –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Å–∏–Ω—É—Å–æ–∏–¥—ã.

p1= plot(y,-x+5,-x-5, title="–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è",show=False)
p1.show()


# In[3]:



# solve(y,x) -–≤—ã–ª–µ—Ç–∞–µ—Ç, sympy –ø–∏—à–µ—Ç,—á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º.–ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ solve
solveset(y,x,Interval(-pi,pi))
#–≤–∏–¥–∏–º, —á—Ç–æ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–±—â–µ–µ "—Ä–µ—à–µ–Ω–∏–µ"


# In[4]:


# –ò—â–µ–º –∫–æ—Ä–Ω–∏ –ø–µ—Ä–µ–±–æ—Ä–æ–º, 0 –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, 
#—ç—Ç–æ –≤–∏–¥–Ω–æ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ:
y.subs(x,0)


# In[5]:


#–æ—Ü–µ–Ω–∏–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–Ω–µ–π
#–¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –º–∞—Å—à—Ç–∞–± –≥—Ä–∞—Ñ–∏–∫–∞
p1= plot(y, title="–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è",xlim=[-5,5],ylim=[-5,5],show=False)
#–∏ –ø–æ–¥–±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–±–æ—Ä–æ–º, –ø—Ä–æ–≤–µ—Ä—è—è —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∏
p2 = plot_implicit(Eq(x,2.6),show=False)
p3 = plot_implicit(Eq(x,-2.6),show=False)
p1.extend(p2)
p1.extend(p3)
p1.show()
#–Ω–∞ –≥–ª–∞–∑–æ–∫, –∫–æ—Ä–Ω–∏ –≤–æ—Ç —Ç–∞–∫–∏–µ:
found_roots=[-2.6,0,2.6]


# In[6]:


#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
def check_x_roots(func,sub_in):
    check_res = []
    for n in range(0,len(sub_in)):
        check_res.append(func.evalf(subs={x:sub_in[n]}))
    return check_res
print(check_x_roots(y,found_roots))


# In[7]:


#–Ω–∞–ø–∏—Å–∞–ª —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –º–∏–Ω–∏–º—É–º –¥–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ 0 –¥–æ 1e-5(—Å—Ç–æ—Ç—ã—Å—è—á–Ω—ã—Ö).
def approx_x_roots(func,sub_in):
    approx_res = []
    for n in range(0,len(sub_in)):
        close_root=func.evalf(subs={x:sub_in[n]})
        sub = sub_in[n]
        while abs(close_root)> 1e-5:
                if close_root<0:
                    sub-=1e-5
                    close_root=func.evalf(subs={x:sub})
                else:
                    sub+=1e-5
                    close_root=func.evalf(subs={x:sub})
        approx_res.append(sub)
    return approx_res

found_roots=approx_x_roots(y,found_roots)
print("—É—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏")
print(found_roots)
print("–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é")
print(check_x_roots(y,found_roots))
#–≤–∏–¥–∏–º, —á—Ç–æ 2.6 –±—ã–ª–∏ –¥–æ–≤–æ–ª—å–Ω–æ –±–ª–∏–∑–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏., –∑–Ω–∞—á–∏—Ç –∫–æ—Ä–Ω–∏ –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.


# In[8]:


# –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏ —É–±—ã–≤–∞–Ω–∏—è —Å–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é
Y = y.diff(x)
Y


# In[9]:


plot(Y)


# In[10]:


diff_roots=solveset(Y, x,Interval(-pi/2,pi/2))
diff_roots


# In[11]:


# –û—Ü–µ–Ω–∏–º –∫–æ—Ä–Ω–∏ –Ω—É–º–µ—Ä–∏—á–µ—Å–∫–∏,–¥–æ 4-–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
N(diff_roots,4)


# In[12]:


# –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–∏–π —Å–ª—É—á–∞–π
solveset(Y, x)
# –í–∏–¥–Ω–æ, —á—Ç–æ –∫–æ—Ä–Ω–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤ 2ùúã n, –≥–¥–µ n - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ .


# In[13]:


diff_p = plot(Y,show=False)

# –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å 2ùúã
diff_n1 = plot_implicit(Eq(x,atan(-2*sqrt(6))+2*pi*0),show=False)
diff_p.extend(diff_n1)
diff_n2 = plot_implicit(Eq(x,atan(-2*sqrt(6))+2*pi*1),show=False)
diff_p.extend(diff_n2)
#–∑–¥–µ—Å—å –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è x, –∏–Ω–∞—á–µ –¥–ª—è -7.6 –Ω–µ —Å—Ç—Ä–æ–∏–ª–æ—Å—å
diff_n3 = plot_implicit(Eq(x,atan(-2*sqrt(6))-2*pi*1),show=False,x_var = (x,-10,10))
diff_p.extend(diff_n3)

diff_p.show()
#–≤–∏–¥–∏–º,—á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –æ—Ç—Ä–µ–∑–æ–∫ —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–æ–π –≤ 2ùúã 


# In[14]:



#–ö–æ—Ä–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –¥–∞–¥—É—Ç –Ω–∞–º –æ—Ç—Ä–µ–∑–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏ —É–±—ã–≤–∞–Ω–∏—è
solve_univariate_inequality(Y > 0,x, relational=False)


# In[15]:


solve_univariate_inequality(Y < 0,x,relational=False, domain=S.Reals)


# In[16]:


growing_set=[-atan(2*sqrt(6))+2*pi,atan(2*sqrt(6))]
growing_set = list(map(N,growing_set))
print(growing_set)
#—Ñ—É–Ω–∫—Ü–∏—è y —Ä–∞—Å—Ç–µ—Ç –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö ~[-1.369;1.369], c –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é 2ùúã


# In[17]:


shrinking_set = [atan(2*sqrt(6)),-atan(2*sqrt(6))+2*pi]
shrinking_set = list(map(N,shrinking_set))
print(shrinking_set)
#—Ñ—É–Ω–∫—Ü–∏—è y–±—ã–≤–∞–µ—Ç –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö ~[1.369;4.914], c –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é 2ùúã


# In[18]:


# –í—ã—á–∏—Å–ª–∏–º –≤–µ—Ä—à–∏–Ω—ã –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–º –æ—Ç—Ä–µ–∑–∫–µ, –æ–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Å –ø–µ—Ä–∏–æ–¥–æ–º 2ùúã
extrem=solve(Y)
extrem


# In[19]:


extrem = list(map(N,extrem))
extrem
#–ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ç–æ –∂–µ —Å–∞–º–æ–µ,—á—Ç–æ –∏ —á–µ—Ä–µ–∑ –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å—ã. 
# –õ–æ–≥–∏—á–Ω–æ, –≤ —ç—Ç–∏—Ö —Ç–æ—á–∫–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–µ–Ω—è–µ—Ç —Å–≤–æ–π –∑–Ω–∞–∫,
# –∞ –∑–Ω–∞—á–∏—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è y –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞—Ö(—Ç–æ—á–∫–∏ –∏–∑–≥–∏–±–∞)


# In[20]:


e_p = plot(y,show=False)

e1  = plot_implicit(Eq(x,-acos(1/5) + 2*pi),show=False, adaptive=True)
e_p.extend(e1)
e2 = plot_implicit(Eq(x,acos(1/5)),show=False,points=600)
e_p.extend(e2)

e_p.show()


# In[21]:


# 6. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º f > 0
# solve_univariate_inequality(y > 0, x) –ø–∏—à–µ—Ç —á—Ç–æ 'solveset is unable to solve this equation.'
# –ü–æ—ç—Ç–æ–º—É –æ–ø—è—Ç—å –∏–¥–µ–º –æ–ø—ã—Ç–Ω—ã–º –ø—É—Ç–µ–º –ø–æ –∞–Ω–∞–ª–∏–∑—É –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∫–æ—Ä–Ω–µ–π
# –ò –∑–∞–ø–∏—à–µ–º —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–æ —á–µ—Ä–µ–∑ "—Ä–µ—à–µ–Ω–∏–µ" –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞

solve_pos_domain = Or(x < found_roots[0], And(x>found_roots[1],x<found_roots[2])).as_set()
solve_pos_domain


# In[22]:


solveset(5*sin(x) - x>0,x,solve_pos_domain)


# In[23]:


# 7. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º f < 0
# –ó–∞–ø–∏—à–µ–º —Å—Ö–æ–¥–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
solve_neg_domain = Or(x>found_roots[2],And(x > found_roots[0],x<found_roots[1])).as_set()
solve_neg_domain


# In[24]:


solveset(5*sin(x) - x<0,x,solve_neg_domain)

